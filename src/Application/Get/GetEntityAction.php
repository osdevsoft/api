<?php

namespace Osds\Api\Application\Get;

use Osds\Api\Application\BaseAction;

class GetEntityAction extends BaseAction
{

    public function getMessageObject($entity, $request = null)
    {
        $search_fields = $this->getSearchFields($request);
        $query_filters = $this->getQueryFilters($request);

        return new GetEntityQuery(
            $entity,
            $search_fields,
            $query_filters
        );
        //parent::getMessageObject($entity, $request); // TODO: Change the autogenerated stub
    }


    public function call($message_object)
    {
        return $this->ask($message_object);
    }


    /**
     * @param $request
     * @return array
     */
    private function getSearchFields($request)
    {
        $search_fields = [];
        #if we have received an id, set the search fields to look for it
        if (isset($request->custom_parameters->entity_id)) {
            #we are filtering by an entry
            $search_fields['id'] = $request->custom_parameters->entity_id;
        }

        #we are filtering by something received from the external request
        if (isset($request->parameters['search_fields'])) {
            $search_fields += $request->parameters['search_fields'];
            #we don't need them anymore
            unset($request->parameters['search_fields']);
        }
        return $search_fields;
    }

    /**
     * @param $request
     * @return array
     */
    private function getQueryFilters($request)
    {
        $query_filters = [];

        #we are filtering the result query
        if (isset($request->parameters['query_filters'])) {
            $query_filters += $request->parameters['query_filters'];
            #we don't need them anymore
            unset($request->parameters['query_filters']);
        }
        return $query_filters;
    }
}